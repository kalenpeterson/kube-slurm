---
- name: Install Slurm - Part 1 (Dependencies and Munge)
  hosts: all
  gather_facts: yes
  become: yes
  any_errors_fatal: yes
    
  tasks:
  - name: Create Groups
    group:
      name: "{{ item.name }}"
      gid: "{{ item.gid }}"
      state: present
    loop:
      "{{ install_groups }}"

  - name: Create Users
    user:
      name: "{{ item.name }}"
      uid: "{{ item.uid }}"
      group: "{{ item.group }}"
      system: yes
      state: present
    loop:
      "{{ install_users }}"

  - name: Install Dependencies (CentOS)
    yum:
      name:
        - openssl
        - openssl-devel
        - pam-devel
        - numactl
        - numactl-devel
        - hwloc
        - hwloc-devel
        - lua
        - lua-devel
        - readline-devel
        - rrdtool-devel
        - ncurses-devel
        - man2html
        - libibmad
        - libibumad
      state: present
    when: ansible_distribution == 'CentOS'

  - name: Install munge (Ubuntu)
    apt:
      name: 
        - munge
        - libmunge-dev
      state: present
    notify: Restart Munge
    when: ansible_distribution == 'Ubuntu'

  - name: Install munge (CentOS)
    yum:
      name:
        - munge
        - munge-devel
      state: present
    notify: Restart Munge
    when: ansible_distribution == 'CentOS'

  - name: Install Munge Key
    copy:
      src: files/munge.key
      dest: /etc/munge/munge.key
      owner: munge
      group: munge
      mode: '0400'
    notify: Restart Munge

  - name: Install Kubectl
    copy:
      src: /usr/local/bin/kubectl
      dest: /usr/local/bin/kubectl
      owner: root
      group: root
      mode: '0755'
    when: "'node' in group_names"

  handlers:
  - name: Restart Munge
    service:
      name: munge
      state: restarted
      enabled: yes

- name: Install Slurm - Part 2 (Download, Compile, Install Slurm)
  hosts: all
  gather_facts: yes
  become: yes

  tasks:
  - name: Get Installed Slurm Version
    shell:
      cmd: /usr/local/sbin/slurmd --version |sed 's/\s/-/'
      warn: false
    register: slurmd_check
    changed_when: false
    failed_when: false

  - name: Set Slurm Facts
    set_fact:
      slurm_package: "{{ slurm_version }}.tar.bz2"
      installed_slurm_version: "{{ slurmd_check.stdout }}"

  - name: Print Slurm Versions
    debug:
      msg: "Slurm Desired: '{{ slurm_version }}', Slurm Installed: '{{ installed_slurm_version }}'"

  - name: Create download stage dir on local host
    file:
      path: /tmp/slurm-download-stage
      state: directory
    delegate_to: localhost
    run_once: true

  - name: Download Slurm Package locally
    get_url:
      url: "https://download.schedmd.com/slurm/{{ slurm_package }}"
      dest: "/tmp/slurm-download-stage/{{ slurm_package }}"
    delegate_to: localhost
    run_once: true

  - name: Setup Slurm dirs
    file:
      path: "{{ item.path }}"
      state: directory
      owner: slurm
      group: slurm
      mode: "{{ item.mode }}"
    loop:
      - { path: '/etc/slurm', mode: '0755' }
      - { path: '/var/log/slurm', mode: '0755' }

  - name: Copy, Compile and Install Slurm Version
    block:
      - name: Copy Slurm install to each node
        copy:
          src: "/tmp/slurm-download-stage/{{ slurm_package }}"
          dest: "/tmp/{{ slurm_package }}"

      - name: Extract Slurm on each node
        unarchive:
          src: "/tmp/{{ slurm_package }}"
          remote_src: yes
          dest: /tmp
      
      - name: Run Install Config
        command: ./configure --prefix=/usr/local --sysconfdir=/etc/slurm
        args:
          chdir: "/tmp/{{ slurm_version }}"

      - name: Compile Slurm
        command: make
        args:
          chdir: "/tmp/{{ slurm_version }}"

      - name: Install Slurm
        command: make install
        args:
          chdir: "/tmp/{{ slurm_version }}"
        notify: Reload Slurmd
    when: slurm_version != installed_slurm_version or
          force_install|bool == true

  - name: Copy Slurm.conf
    template:
      src: templates/slurm.conf.j2
      dest: /etc/slurm/slurm.conf
      owner: slurm
      group: slurm
      mode: '0644'
    notify: Reload Slurmd

  - name: Copy gres.conf
    copy:
      src: files/lmd.gres.conf
      dest: /etc/slurm/gres.conf
      owner: slurm
      group: slurm
      mode: '0644'
    notify: Reload Slurmd
    when:
      - "'lambda' in group_names"
      - slurm.enable_gpu|bool == true

  - name: Setup Hosts
    lineinfile:
      path: /etc/hosts
      line: "{{ item }}"
      state: present
      backup: yes
    loop: "{{ hosts_file_entries }}"

  # Create the Slurmd Service file only on work nodes
  - name: Create Slurmd Systemd Service File
    copy:
      src: "files/slurmd.service"
      dest: /etc/systemd/system/slurmd.service
      owner: root
      group: root
      mode: '0644'
    notify: Reload Slurmd
    when: "'node' in group_names"

  handlers:
    # Reload Slumrd on a change, only on work nodes
    - name: Reload Slurmd
      systemd:
        name: slurmd.service
        state: restarted
        enabled: yes
        daemon_reload: yes
      when: "'node' in group_names"
    

  
  




